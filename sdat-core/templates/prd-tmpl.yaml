template:
    id: prd-template-v2
    name: 产品需求文档
    version: 2.0
    output:
        format: markdown
        filename: docs/prd.md
        title: "{{project_name}} 产品需求文档 (PRD)"

workflow:
    mode: interactive
    elicitation: advanced-elicitation

sections:
    - id: goals-context
      title: 目标和背景上下文
      instruction: |
          询问项目概要文档是否可用。如果项目概要不存在，强烈建议先使用 project-brief-tmpl 创建一个（它提供了基本的基础：问题陈述、目标用户、成功指标、MVP 范围、约束）。如果用户坚持在没有概要的情况下进行 PRD，请在目标部分收集这些信息。如果项目概要存在，请审查并使用它来填充目标（目标列表）和背景上下文（1-2 段关于解决什么问题以及为什么的描述），以便我们确定 PRD MVP 的哪些部分是和不是在范围内。无论哪种方式，这都是确定需求的关键。包括变更日志表。
      sections:
          - id: goals
            title: 目标
            type: bullet-list
            instruction: 1 行目标列表，如果 PRD 成功交付，将实现的目标 - 用户和项目愿望
          - id: background
            title: 背景上下文
            type: paragraphs
            instruction: 1-2 段简短的总结背景上下文，例如我们在概要中学习到的内容，与目标不重复，解决什么问题，当前的现状或需求是什么
          - id: changelog
            title: 变更日志
            type: table
            columns: [Date, Version, Description, Author]
            instruction: 跟踪文档版本和变更

    - id: requirements
      title: 需求
      instruction: 在两个子部分下草拟功能和非功能需求列表
      elicit: true
      sections:
          - id: functional
            title: 功能
            type: numbered-list
            prefix: FR
            instruction: 每个需求将是一个编号列表，标识符序列以 FR 开头
            examples:
                - "FR6: 待办事项列表使用 AI 检测和警告可能重复的待办事项，即使表述不同。"
          - id: non-functional
            title: 非功能
            type: numbered-list
            prefix: NFR
            instruction: 每个需求将是一个编号列表，标识符序列以 NFR 开头
            examples:
                - "NFR1: AWS 服务使用必须旨在保持在免费层限制内，如果可行。"

    - id: ui-goals
      title: 用户界面设计目标
      condition: PRD 有 UX/UI 需求
      instruction: |
          捕获高层次的 UI/UX 愿景，以指导设计架构师并告知故事创作。步骤：

          1. 根据项目上下文，用有根据的猜测预填充所有子部分
          2. 向用户呈现完整的渲染部分
          3. 清楚地让用户知道假设在哪里
          4. 针对不清楚/缺失的元素或需要更多规范的区域提出有针对性的问题
          5. 这不是详细的 UI 规范 - 专注于产品愿景和用户目标
      elicit: true
      choices:
          accessibility: [None, WCAG AA, WCAG AAA]
          platforms: [Web Responsive, Mobile Only, Desktop Only, Cross-Platform]
      sections:
          - id: ux-vision
            title: 总体 UX 愿景
          - id: interaction-paradigms
            title: 关键交互范式
          - id: core-screens
            title: 核心屏幕和视图
            instruction: 从产品角度来看，什么是最重要的屏幕或视图，才能实现 PRD 的价值和目标？这是为了概念高层次地驱动粗略的史诗或用户故事
            examples:
                - "登录屏幕"
                - "主仪表板"
                - "项目详情页面"
                - "设置页面"
          - id: accessibility
            title: "可访问性: {None|WCAG AA|WCAG AAA|自定义要求}"
          - id: branding
            title: 品牌
            instruction: 必须包含的任何已知品牌元素或风格指南？
            examples:
                - "复制 1900 年代早期的黑白电影风格，包括动画效果，再现电影损坏或页面或状态转换期间的投影仪故障。"
                - "这是我们公司品牌的完整颜色调色板和令牌。"
          - id: target-platforms
            title: "目标设备和平台: {Web Responsive|Mobile Only|Desktop Only|Cross-Platform}"
            examples:
                - "Web Responsive, and all mobile platforms"
                - "仅 iPhone"
                - "ASCII Windows 桌面"

    - id: technical-assumptions
      title: 技术假设
      instruction: |
          收集将指导架构师的技术决策。步骤：

          1. 检查 {root}/data/technical-preferences.yaml 或附加的 technical-preferences 文件是否存在 - 使用它来预填充选择
          2. 询问用户：语言、框架、入门模板、库、API、部署目标
          3. 对于未知，基于项目目标和 MVP 范围提供指导
          4. 记录所有技术选择及其理由（为什么这个选择适合项目）
          5. 这些成为架构师的约束 - 具体和完整
      elicit: true
      choices:
          repository: [Monorepo, Polyrepo]
          architecture: [Monolith, Microservices, Serverless]
          testing: [Unit Only, Unit + Integration, Full Testing Pyramid]
      sections:
          - id: repository-structure
            title: "仓库结构: {Monorepo|Polyrepo|Multi-repo}"
          - id: service-architecture
            title: 服务架构
            instruction: "关键决策 - 记录高层次的服务架构（例如，单体、微服务、Monorepo 中的 Serverless 函数）。"
          - id: testing-requirements
            title: 测试要求
            instruction: "关键决策 - 记录测试要求，单元测试、集成测试、端到端测试、手动测试、需要手动测试的便利方法。"
          - id: additional-assumptions
            title: 其他技术假设和请求
            instruction: 在整个文档撰写过程中，如果架构师认为任何其他技术假设是适当的，请将它们添加为附加的编号列表项

    - id: epic-list
      title: 史诗列表
      instruction: |
          呈现一个高层次的史诗列表供用户批准。每个史诗应该有一个标题和简短（1 句话）的目标陈述。这允许用户在深入细节之前审查整体结构。

          CRITICAL: 史诗必须遵循敏捷最佳实践的逻辑顺序:

          - 每个史诗应该交付一个有意义的、端到端的、完全可部署的可测试功能增量
          - 史诗 1 必须建立项目的基础设施（应用设置、Git、CI/CD、核心服务），除非我们正在向现有应用添加新功能，同时交付一个初始功能，即使是简单的健康检查路由或简单的 Canary 页面显示 - 记住这一点，当我们为第一个史诗制作故事时！
          - 每个后续史诗建立在先前史诗的功能之上，交付提供有形价值给用户或业务的主要功能块，当部署时
          - 并非每个项目都需要多个史诗，一个史诗需要提供价值。例如，一个 API 完成可以提供价值，即使 UI 不完整并且计划为单独的史诗。
          - 在史诗数量上要保守，但让用户知道你的理由，并提供拆分选项，如果有些史诗太大或专注于不同的事情。
          - 跨切面问题应该贯穿史诗和故事，而不是最终故事。例如，将日志记录框架作为史诗的最后一个故事，或作为项目的最终史诗或故事，这将很糟糕，因为我们从一开始就没有日志记录。
      elicit: true
      examples:
          - "Epic 1: 基础和核心基础设施: 建立项目设置、身份验证和基本用户管理"
          - "Epic 2: 核心业务实体: 创建和管理具有 CRUD 操作的主要域对象"
          - "Epic 3: 用户工作流和交互: 启用关键用户旅程和业务流程"
          - "Epic 4: 报告和分析: 为用户提供见解和数据可视化"

    - id: epic-details
      title: Epic {{epic_number}} {{epic_title}}
      repeatable: true
      instruction: |
          在史诗列表获得批准后，以完整的审查单元呈现每个史诗及其所有故事和验收标准。

          对于每个史诗，提供扩展的目标（2-3 句话描述目标和所有故事将实现的价值）。

          关键故事排序要求:

          - 每个史诗中的故事必须逻辑顺序
          - 每个故事应该是一个 "垂直切片"，除了项目基础的早期启用者故事，提供完整的函数
          - 没有故事应该依赖于稍后故事或史诗的工作
          - 识别和注意任何直接的前置故事
          - 专注于 "什么" 和 "为什么" 而不是 "如何"（将技术实现留给架构师），但精确到足以支持从故事到故事的逻辑顺序操作
          - 确保每个故事交付清晰的客户或业务价值，尝试避免启用者，并将它们构建到交付价值的史诗中
          - 为 AI 代理执行调整故事大小：每个故事必须在一次专注于会话中由单个 AI Agent 完成，没有上下文溢出
          - 思考 "初级开发人员工作 2-4 小时" - 故事必须小、专注和自包含
          - 如果一个故事似乎很复杂，进一步分解，只要它能提供一个垂直切片
      elicit: true
      template: "{{epic_goal}}"
      sections:
          - id: story
            title: story {{epic_number}}.{{story_number}} {{story_title}}
            repeatable: true
            template: |
                作为 {{user_type}}，
                我想要 {{action}}，
                以便 {{benefit}}。
            sections:
                - id: acceptance-criteria
                  title: 验收标准
                  type: numbered-list
                  item_template: "{{criterion_number}}: {{criteria}}"
                  repeatable: true
                  instruction: |
                      定义清晰、全面且可测试的验收标准，这些标准：

                      - 精确定义从功能角度看 "完成" 意味着什么
                      - 明确且作为验证的基础
                      - 包括 PRD 中的任何关键非功能性要求
                      - 考虑后端/数据组件的本地可测试性
                      - 指定 UI/UX 要求和框架遵循，如果适用
                      - 避免应该在其他故事或 PRD 部分中的跨切面问题

    - id: checklist-results
      title: 清单结果报告
      instruction: 在运行清单和起草提示之前，请提供输出完整的更新 PRD。如果输出它，请与用户确认，您将继续运行清单并生成报告。一旦用户确认，执行 pm-checklist 并填充此部分的结果。

    - id: next-steps
      title: 下一步
      sections:
          - id: ux-expert-prompt
            title: UX 专家提示
            instruction: 本节将包含 UX 专家的提示，保持简短和切题，使用此文档作为输入来启动创建架构模式。
          - id: architect-prompt
            title: 架构提示
            instruction: 本节将包含架构师的提示，保持简短和切题，使用此文档作为输入来启动创建架构模式。
