workflow:
    id: greenfield-fullstack
    name: 全新项目的全栈应用开发
    description: >-
        代理工作流：从概念到开发，构建全栈应用程序。
        既支持复杂项目的全面规划，也支持简单项目的快速原型开发。
    type: greenfield
    project_types:
        - web-app
        - saas
        - enterprise-app
        - prototype
        - mvp

    sequence:
        - agent: analyst
          creates: project-brief.md
          optional_steps:
              - brainstorming_session
              - market_research_prompt
          notes: "可以先进行头脑风暴，然后在创建项目简介之前进行可选的深入研究。保存输出：将最终的 project-brief.md 复制到您项目的 docs/ 文件夹中。"

        - agent: pm
          creates: prd.md
          requires: project-brief.md
          notes: "使用 prd-tmpl 从项目简介创建 PRD。保存输出：将最终的 prd.md 复制到您项目的 docs/ 文件夹中。"

        - agent: ux-expert
          creates: front-end-spec.md
          requires: prd.md
          optional_steps:
              - user_research_prompt
          notes: "使用 front-end-spec-tmpl 创建 UI/UX 规范。保存输出：将最终的 front-end-spec.md 复制到您项目的 docs/ 文件夹中。"

        - agent: ux-expert
          creates: v0_prompt (optional)
          requires: front-end-spec.md
          condition: user_wants_ai_generation
          notes: "可选但推荐：为 v0、Lovable 等工具生成 AI UI prompt。使用 generate-ai-frontend-prompt task。用户然后可以在外部工具中生成 UI 并下载项目结构。"

        - agent: architect
          creates: fullstack-architecture.md
          requires:
              - prd.md
              - front-end-spec.md
          optional_steps:
              - technical_research_prompt
              - review_generated_ui_structure
          notes: "使用 fullstack-architecture-tmpl 创建全面的架构。如果用户使用 v0/Lovable 生成了 UI，可以将项目结构整合到架构中。可能会建议对 PRD stories 进行更改或添加新的 stories。保存输出：将最终的 fullstack-architecture.md 复制到您项目的 docs/ 文件夹中。"

        - agent: pm
          updates: prd.md (if needed)
          requires: fullstack-architecture.md
          condition: architecture_suggests_prd_changes
          notes: "如果 architect 建议 story 更改，更新 PRD 并重新导出完整的未删减 prd.md 到 docs/ 文件夹。"

        - agent: po
          validates: all_artifacts
          uses: po-master-checklist
          notes: "验证所有文档的一致性和完整性。可能需要更新任何文档。"

        - agent: various
          updates: any_flagged_documents
          condition: po_checklist_issues
          notes: "如果 PO 发现问题，返回到相关 agent 进行修复并重新导出更新的文档到 docs/ 文件夹。"

        - project_setup_guidance:
          action: guide_project_structure
          condition: user_has_generated_ui
          notes: "如果用户使用 v0/Lovable 生成了 UI：对于 polyrepo 设置，将下载的项目放在单独的前端 repo 中，与后端 repo 并列。对于 monorepo，放在 apps/web 或 packages/frontend 目录中。查看架构文档获取具体指导。"

        - development_order_guidance:
          action: guide_development_sequence
          notes: "基于 PRD stories：如果 stories 偏向前端，首先从前端项目/目录开始。如果偏向后端或 API-first，从后端开始。对于紧密耦合的功能，在 monorepo 设置中遵循 story 序列。参考分片的 PRD epics 获取开发顺序。"

        - agent: po
          action: shard_documents
          creates: sharded_docs
          requires: all_artifacts_in_project
          notes: |
              为 IDE 开发分片文档：
              - 选项 A：使用 PO agent 进行分片：@po 然后要求分片 docs/prd.md
              - 选项 B：手动：将 shard-doc task + docs/prd.md 拖入聊天
              - 创建 docs/prd/ 和 docs/architecture/ 文件夹，包含分片内容

        - agent: sm
          action: create_story
          creates: story.md
          requires: sharded_docs
          repeats: for_each_epic
          notes: |
              Story 创建周期：
              - SM Agent（新聊天）：@sm → *create
              - 从分片文档创建下一个 story
              - Story 以"草稿"状态开始

        - agent: analyst/pm
          action: review_draft_story
          updates: story.md
          requires: story.md
          optional: true
          condition: user_wants_story_review
          notes: |
              可选：审查并批准草稿 story
              - 注意：story-review task 即将推出
              - 审查 story 完整性和一致性
              - 更新 story 状态：草稿 → 已批准

        - agent: dev
          action: implement_story
          creates: implementation_files
          requires: story.md
          notes: |
              Dev Agent（新聊天）：@dev
              - 实现已批准的 story
              - 使用所有更改更新文件列表
              - 完成时将 story 标记为"审查"

        - agent: qa
          action: review_implementation
          updates: implementation_files
          requires: implementation_files
          optional: true
          notes: |
              可选：QA Agent（新聊天）：@qa → review-story
              - 高级开发审查，具备重构能力
              - 直接修复小问题
              - 为剩余项目留下检查清单
              - 更新 story 状态（审查 → 完成或保持审查）

        - agent: dev
          action: address_qa_feedback
          updates: implementation_files
          condition: qa_left_unchecked_items
          notes: |
              如果 QA 留下未检查的项目：
              - Dev Agent（新聊天）：处理剩余项目
              - 返回 QA 进行最终批准

        - repeat_development_cycle:
          action: continue_for_all_stories
          notes: |
              对所有 epic stories 重复 story 周期（SM → Dev → QA）
              继续直到 PRD 中的所有 stories 完成

        - agent: po
          action: epic_retrospective
          creates: epic-retrospective.md
          condition: epic_complete
          optional: true
          notes: |
              可选：epic 完成后
              - 注意：epic-retrospective task 即将推出
              - 验证 epic 是否正确完成
              - 记录学习和改进

        - workflow_end:
          action: project_complete
          notes: |
              所有 stories 已实现并审查完成！
              项目开发阶段完成。

              参考：{root}/data/sdat-kb.md#IDE Development Workflow

    flow_diagram: |
        ```mermaid
        graph TD
            A[Start: Greenfield Project] --> B[analyst: project-brief.md]
            B --> C[pm: prd.md]
            C --> D[ux-expert: front-end-spec.md]
            D --> D2{Generate v0 prompt?}
            D2 -->|Yes| D3[ux-expert: create v0 prompt]
            D2 -->|No| E[architect: fullstack-architecture.md]
            D3 --> D4[User: generate UI in v0/Lovable]
            D4 --> E
            E --> F{Architecture suggests PRD changes?}
            F -->|Yes| G[pm: update prd.md]
            F -->|No| H[po: validate all artifacts]
            G --> H
            H --> I{PO finds issues?}
            I -->|Yes| J[Return to relevant agent for fixes]
            I -->|No| K[po: shard documents]
            J --> H

            K --> L[sm: create story]
            L --> M{Review draft story?}
            M -->|Yes| N[analyst/pm: review & approve story]
            M -->|No| O[dev: implement story]
            N --> O
            O --> P{QA review?}
            P -->|Yes| Q[qa: review implementation]
            P -->|No| R{More stories?}
            Q --> S{QA found issues?}
            S -->|Yes| T[dev: address QA feedback]
            S -->|No| R
            T --> Q
            R -->|Yes| L
            R -->|No| U{Epic retrospective?}
            U -->|Yes| V[po: epic retrospective]
            U -->|No| W[Project Complete]
            V --> W

            B -.-> B1[Optional: brainstorming]
            B -.-> B2[Optional: market research]
            D -.-> D1[Optional: user research]
            E -.-> E1[Optional: technical research]

            style W fill:#90EE90
            style K fill:#ADD8E6
            style L fill:#ADD8E6
            style O fill:#ADD8E6
            style D3 fill:#E6E6FA
            style D4 fill:#E6E6FA
            style B fill:#FFE4B5
            style C fill:#FFE4B5
            style D fill:#FFE4B5
            style E fill:#FFE4B5
            style N fill:#F0E68C
            style Q fill:#F0E68C
            style V fill:#F0E68C
        ```

    decision_guidance:
        when_to_use:
            - 构建可用于生产环境的应用程序
            - 需要多名团队成员协作
            - 功能需求复杂
            - 需要全面的文档
            - 预计长期维护
            - 面向企业或客户的应用

    handoff_prompts:
        analyst_to_pm: "项目简介已完成。请将其保存为 docs/project-brief.md，然后创建 PRD。"
        pm_to_ux: "PRD 已准备好。请将其保存为 docs/prd.md，然后创建 UI/UX 规范。"
        ux_to_architect: "UI/UX 规范已完成。请将其保存为 docs/front-end-spec.md，然后创建全栈架构文档。"
        architect_review: "架构文档已完成。请将其保存为 docs/fullstack-architecture.md。是否建议对 PRD stories 进行更改或需要添加新 stories？"
        architect_to_pm: "请根据建议的 story 变更更新 PRD，并将完整的 prd.md 重新导出到 docs/ 文件夹。"
        updated_to_po: "所有文档已准备好并保存在 docs/ 文件夹。请验证所有工件的一致性。"
        po_issues: "PO 发现 [document] 存在问题。请返回 [agent] 进行修复并重新保存更新后的文档。"
        complete: "所有规划工件已验证并保存至 docs/ 文件夹。请进入 IDE 环境开始开发。"
