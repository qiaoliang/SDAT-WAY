workflow:
    id: brownfield-ui
    name: Brownfield UI/Frontend Enhancement
    description: >-
        Agent workflow for enhancing existing frontend applications with new features,
        modernization, or design improvements. Handles existing UI analysis and safe integration.
    type: brownfield
    project_types:
        - ui-modernization
        - framework-migration
        - design-refresh
        - frontend-enhancement

    sequence:
        - step: ui_analysis
          agent: architect
          action: analyze existing project and use task document-project
          creates: multiple documents per the document-project template
          notes: "审查现有前端应用程序、用户反馈、分析数据，并识别改进领域。"

        - agent: pm
          creates: prd.md
          uses: brownfield-prd-tmpl
          requires: existing_ui_analysis
          notes: "创建专注于UI增强的综合PRD，包含现有系统分析。保存输出：将最终的prd.md复制到项目的docs/文件夹。"

        - agent: ux-expert
          creates: front-end-spec.md
          uses: front-end-spec-tmpl
          requires: prd.md
          notes: "创建与现有设计模式集成的UI/UX规范。保存输出：将最终的front-end-spec.md复制到项目的docs/文件夹。"

        - agent: architect
          creates: architecture.md
          uses: brownfield-architecture-tmpl
          requires:
              - prd.md
              - front-end-spec.md
          notes: "创建包含组件集成策略和迁移规划的前端架构。保存输出：将最终的architecture.md复制到项目的docs/文件夹。"

        - agent: po
          validates: all_artifacts
          uses: po-master-checklist
          notes: "验证所有文档的UI集成安全性和设计一致性。可能需要更新任何文档。"

        - agent: various
          updates: any_flagged_documents
          condition: po_checklist_issues
          notes: "如果PO发现问题，返回相关agent进行修复并重新导出更新的文档到docs/文件夹。"

        - agent: po
          action: shard_documents
          creates: sharded_docs
          requires: all_artifacts_in_project
          notes: |
              为IDE开发分片文档：
              - 选项A：使用PO agent进行分片：@po然后要求分片docs/prd.md
              - 选项B：手动：将shard-doc task + docs/prd.md拖入聊天
              - 创建docs/prd/和docs/architecture/文件夹，包含分片内容

        - agent: sm
          action: create_story
          creates: story.md
          requires: sharded_docs
          repeats: for_each_epic
          notes: |
              Story创建周期：
              - SM Agent（新聊天）：@sm → *create
              - 从分片文档创建下一个story
              - Story以"Draft"状态开始

        - agent: analyst/pm
          action: review_draft_story
          updates: story.md
          requires: story.md
          optional: true
          condition: user_wants_story_review
          notes: |
              可选：审查并批准草稿story
              - 注意：story-review task即将推出
              - 审查story完整性和一致性
              - 更新story状态：Draft → Approved

        - agent: dev
          action: implement_story
          creates: implementation_files
          requires: story.md
          notes: |
              Dev Agent（新聊天）：@dev
              - 实现已批准的story
              - 使用所有更改更新文件列表
              - 完成时将story标记为"Review"

        - agent: qa
          action: review_implementation
          updates: implementation_files
          requires: implementation_files
          optional: true
          notes: |
              可选：QA Agent（新聊天）：@qa → review-story
              - 高级开发人员审查，具备重构能力
              - 直接修复小问题
              - 为剩余项目留下检查清单
              - 更新story状态（Review → Done或保持Review）

        - agent: dev
          action: address_qa_feedback
          updates: implementation_files
          condition: qa_left_unchecked_items
          notes: |
              如果QA留下未检查的项目：
              - Dev Agent（新聊天）：处理剩余项目
              - 返回QA进行最终批准

        - repeat_development_cycle:
          action: continue_for_all_stories
          notes: |
              为所有epic stories重复story周期（SM → Dev → QA）
              继续直到PRD中的所有stories完成

        - agent: po
          action: epic_retrospective
          creates: epic-retrospective.md
          condition: epic_complete
          optional: true
          notes: |
              可选：epic完成后
              - 注意：epic-retrospective task即将推出
              - 验证epic是否正确完成
              - 记录学习和改进

        - workflow_end:
          action: project_complete
          notes: |
              所有stories已实现并审查完成！
              项目开发阶段完成。

              参考：{root}/data/sdat-kb.md#IDE Development Workflow

    flow_diagram: |
        ```mermaid
        graph TD
            A[Start: UI Enhancement] --> B[analyst: analyze existing UI]
            B --> C[pm: prd.md]
            C --> D[ux-expert: front-end-spec.md]
            D --> E[architect: architecture.md]
            E --> F[po: validate with po-master-checklist]
            F --> G{PO finds issues?}
            G -->|Yes| H[Return to relevant agent for fixes]
            G -->|No| I[po: shard documents]
            H --> F

            I --> J[sm: create story]
            J --> K{Review draft story?}
            K -->|Yes| L[analyst/pm: review & approve story]
            K -->|No| M[dev: implement story]
            L --> M
            M --> N{QA review?}
            N -->|Yes| O[qa: review implementation]
            N -->|No| P{More stories?}
            O --> Q{QA found issues?}
            Q -->|Yes| R[dev: address QA feedback]
            Q -->|No| P
            R --> O
            P -->|Yes| J
            P -->|No| S{Epic retrospective?}
            S -->|Yes| T[po: epic retrospective]
            S -->|No| U[Project Complete]
            T --> U

            style U fill:#90EE90
            style I fill:#ADD8E6
            style J fill:#ADD8E6
            style M fill:#ADD8E6
            style C fill:#FFE4B5
            style D fill:#FFE4B5
            style E fill:#FFE4B5
            style L fill:#F0E68C
            style O fill:#F0E68C
            style T fill:#F0E68C
        ```

    decision_guidance:
        when_to_use:
            - UI 增强需要协调多个故事
            - 需要变更设计系统
            - 需要新的组件模式
            - 需要用户调研和测试
            - 多个团队成员将协作相关改动

    handoff_prompts:
        analyst_to_pm: "UI 分析已完成。请创建包含 UI 集成策略的综合 PRD。"
        pm_to_ux: "PRD 已准备好。请将其保存为 docs/prd.md，然后创建 UI/UX 规范。"
        ux_to_architect: "UI/UX 规范已完成。请将其保存为 docs/front-end-spec.md，然后创建前端架构文档。"
        architect_to_po: "架构文档已完成。请将其保存为 docs/architecture.md。请验证所有工件以确保 UI 集成安全。"
        po_issues: "PO 发现 [document] 存在问题。请返回 [agent] 进行修复并重新保存更新后的文档。"
        complete: "所有规划工件已验证并保存至 docs/ 文件夹。请进入 IDE 环境开始开发。"
