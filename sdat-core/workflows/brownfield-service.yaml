workflow:
    id: brownfield-service
    name: 已有项目的service/API 增强
    description: >-
        这是一个用于为现有后端服务和 API 增加新功能、实现现代化或提升性能的 Agent workflow。涵盖现有系统分析与安全集成。
    type: brownfield
    project_types:
        - service-modernization
        - api-enhancement
        - microservice-extraction
        - performance-optimization
        - integration-enhancement

    sequence:
        - step: service_analysis
          agent: architect
          action: analyze existing project and use task document-project
          creates: multiple documents per the document-project template
          notes: "审查现有服务文档、代码库、性能指标，并识别集成依赖关系。"

        - agent: pm
          creates: prd.md
          uses: brownfield-prd-tmpl
          requires: existing_service_analysis
          notes: "创建专注于服务增强的综合 PRD，包含现有系统分析。保存输出：将最终的 prd.md 复制到项目的 docs/ 文件夹。"

        - agent: architect
          creates: architecture.md
          uses: brownfield-architecture-tmpl
          requires: prd.md
          notes: "创建包含服务集成策略和 API 演进规划的架构。保存输出：将最终的 architecture.md 复制到项目的 docs/ 文件夹。"

        - agent: po
          validates: all_artifacts
          uses: po-master-checklist
          notes: "验证所有文档的服务集成安全性和 API 兼容性。可能需要更新任何文档。"

        - agent: various
          updates: any_flagged_documents
          condition: po_checklist_issues
          notes: "如果 PO 发现问题，返回相关 agent 进行修复并重新导出更新的文档到 docs/ 文件夹。"

        - agent: po
          action: shard_documents
          creates: sharded_docs
          requires: all_artifacts_in_project
          notes: |
              为 IDE 开发分片文档：
              - 选项 A：使用 PO agent 进行分片：@po 然后要求分片 docs/prd.md
              - 选项 B：手动：将 shard-doc task + docs/prd.md 拖入聊天
              - 创建包含分片内容的 docs/prd/ 和 docs/architecture/ 文件夹

        - agent: sm
          action: create_story
          creates: story.md
          requires: sharded_docs
          repeats: for_each_epic
          notes: |
              Story 创建周期：
              - SM Agent（新聊天）：@sm → *create
              - 从分片文档创建下一个 story
              - Story 以 "Draft" 状态开始

        - agent: analyst/pm
          action: review_draft_story
          updates: story.md
          requires: story.md
          optional: true
          condition: user_wants_story_review
          notes: |
              可选：审查并批准草稿 story
              - 注意：story-review task 即将推出
              - 审查 story 完整性和一致性
              - 更新 story 状态：Draft → Approved

        - agent: dev
          action: implement_story
          creates: implementation_files
          requires: story.md
          notes: |
              Dev Agent（新聊天）：@dev
              - 实现已批准的 story
              - 使用所有更改更新文件列表
              - 完成时将 story 标记为 "Review"

        - agent: qa
          action: review_implementation
          updates: implementation_files
          requires: implementation_files
          optional: true
          notes: |
              可选：QA Agent（新聊天）：@qa → review-story
              - 具有重构能力的高级开发审查
              - 直接修复小问题
              - 为剩余项目留下检查清单
              - 更新 story 状态（Review → Done 或保持 Review）

        - agent: dev
          action: address_qa_feedback
          updates: implementation_files
          condition: qa_left_unchecked_items
          notes: |
              如果 QA 留下未检查的项目：
              - Dev Agent（新聊天）：处理剩余项目
              - 返回 QA 进行最终批准

        - repeat_development_cycle:
          action: continue_for_all_stories
          notes: |
              为所有 epic stories 重复 story 周期（SM → Dev → QA）
              继续直到 PRD 中的所有 stories 完成

        - agent: po
          action: epic_retrospective
          creates: epic-retrospective.md
          condition: epic_complete
          optional: true
          notes: |
              可选：epic 完成后
              - 注意：epic-retrospective task 即将推出
              - 验证 epic 是否正确完成
              - 记录学习经验和改进

        - workflow_end:
          action: project_complete
          notes: |
              所有 stories 已实现并审查完成！
              项目开发阶段完成。

              参考：{root}/data/sdat-kb.md#IDE Development Workflow

    flow_diagram: |
        ```mermaid
        graph TD
            A[Start: Service Enhancement] --> B[analyst: analyze existing service]
            B --> C[pm: prd.md]
            C --> D[architect: architecture.md]
            D --> E[po: validate with po-master-checklist]
            E --> F{PO finds issues?}
            F -->|Yes| G[Return to relevant agent for fixes]
            F -->|No| H[po: shard documents]
            G --> E

            H --> I[sm: create story]
            I --> J{Review draft story?}
            J -->|Yes| K[analyst/pm: review & approve story]
            J -->|No| L[dev: implement story]
            K --> L
            L --> M{QA review?}
            M -->|Yes| N[qa: review implementation]
            M -->|No| O{More stories?}
            N --> P{QA found issues?}
            P -->|Yes| Q[dev: address QA feedback]
            P -->|No| O
            Q --> N
            O -->|Yes| I
            O -->|No| R{Epic retrospective?}
            R -->|Yes| S[po: epic retrospective]
            R -->|No| T[Project Complete]
            S --> T

            style T fill:#90EE90
            style H fill:#ADD8E6
            style I fill:#ADD8E6
            style L fill:#ADD8E6
            style C fill:#FFE4B5
            style D fill:#FFE4B5
            style K fill:#F0E68C
            style N fill:#F0E68C
            style S fill:#F0E68C
        ```

    decision_guidance:
        when_to_use:
            - 服务增强需要协调多个故事
            - 需要 API 版本管理或有破坏性变更
            - 需要数据库结构变更
            - 需要性能或可扩展性提升
            - 影响多个集成点

    handoff_prompts:
        analyst_to_pm: "服务分析已完成。请创建包含服务集成策略的综合 PRD。"
        pm_to_architect: "PRD 已准备好。请将其保存为 docs/prd.md，然后创建服务架构文档。"
        architect_to_po: "架构文档已完成。请将其保存为 docs/architecture.md。请验证所有工件以确保服务集成安全。"
        po_issues: "PO 发现 [document] 存在问题。请返回 [agent] 进行修复并重新保存更新后的文档。"
        complete: "所有规划工件已验证并保存至 docs/ 文件夹。请进入 IDE 环境开始开发。"
