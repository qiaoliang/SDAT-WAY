workflow:
    id: greenfield-service
    name: 全新项目的 Service/API 开发
    description: >-
        从概念到开发构建后端服务的 Agent workflow。
        支持复杂服务的全面规划和简单 API 的快速原型设计。
    type: greenfield
    project_types:
        - rest-api
        - graphql-api
        - microservice
        - backend-service
        - api-prototype
        - simple-service

    sequence:
        - agent: analyst
          creates: project-brief.md
          optional_steps:
              - brainstorming_session
              - market_research_prompt
          notes: "可以先进行头脑风暴，然后在创建项目简介之前进行可选的深入研究。保存输出：将最终的 project-brief.md 复制到您项目的 docs/ 文件夹中。"

        - agent: pm
          creates: prd.md
          requires: project-brief.md
          notes: "使用 prd-tmpl 从项目简介创建 PRD，专注于 API/服务需求。保存输出：将最终的 prd.md 复制到您项目的 docs/ 文件夹中。"

        - agent: architect
          creates: architecture.md
          requires: prd.md
          optional_steps:
              - technical_research_prompt
          notes: "使用 architecture-tmpl 创建后端/服务架构。可能会建议对 PRD stories 进行更改或添加新的 stories。保存输出：将最终的 architecture.md 复制到您项目的 docs/ 文件夹中。"

        - agent: pm
          updates: prd.md (if needed)
          requires: architecture.md
          condition: architecture_suggests_prd_changes
          notes: "如果 architect 建议 story 更改，请更新 PRD 并将完整的未编辑 prd.md 重新导出到 docs/ 文件夹。"

        - agent: po
          validates: all_artifacts
          uses: po-master-checklist
          notes: "验证所有文档的一致性和完整性。可能需要更新任何文档。"

        - agent: various
          updates: any_flagged_documents
          condition: po_checklist_issues
          notes: "如果 PO 发现问题，请返回相关 agent 进行修复并将更新的文档重新导出到 docs/ 文件夹。"

        - agent: po
          action: shard_documents
          creates: sharded_docs
          requires: all_artifacts_in_project
          notes: |
              为 IDE 开发分片文档：
              - 选项 A：使用 PO agent 进行分片：@po 然后要求分片 docs/prd.md
              - 选项 B：手动：将 shard-doc task + docs/prd.md 拖入聊天
              - 创建 docs/prd/ 和 docs/architecture/ 文件夹，包含分片内容

        - agent: sm
          action: create_story
          creates: story.md
          requires: sharded_docs
          repeats: for_each_epic
          notes: |
              Story 创建周期：
              - SM Agent（新聊天）：@sm → *create
              - 从分片文档创建下一个 story
              - Story 以"草稿"状态开始

        - agent: analyst/pm
          action: review_draft_story
          updates: story.md
          requires: story.md
          optional: true
          condition: user_wants_story_review
          notes: |
              可选：审查并批准草稿 story
              - 注意：story-review task 即将推出
              - 审查 story 完整性和一致性
              - 更新 story 状态：草稿 → 已批准

        - agent: dev
          action: implement_story
          creates: implementation_files
          requires: story.md
          notes: |
              Dev Agent（新聊天）：@dev
              - 实现已批准的 story
              - 使用所有更改更新文件列表
              - 完成时将 story 标记为"审查"

        - agent: qa
          action: review_implementation
          updates: implementation_files
          requires: implementation_files
          optional: true
          notes: |
              可选：QA Agent（新聊天）：@qa → review-story
              - 具有重构能力的高级开发审查
              - 直接修复小问题
              - 为剩余项目留下检查清单
              - 更新 story 状态（审查 → 完成或保持审查）

        - agent: dev
          action: address_qa_feedback
          updates: implementation_files
          condition: qa_left_unchecked_items
          notes: |
              如果 QA 留下未检查的项目：
              - Dev Agent（新聊天）：处理剩余项目
              - 返回 QA 进行最终批准

        - repeat_development_cycle:
          action: continue_for_all_stories
          notes: |
              对所有 epic stories 重复 story 周期（SM → Dev → QA）
              继续直到 PRD 中的所有 stories 完成

        - agent: po
          action: epic_retrospective
          creates: epic-retrospective.md
          condition: epic_complete
          optional: true
          notes: |
              可选：epic 完成后
              - 注意：epic-retrospective task 即将推出
              - 验证 epic 是否正确完成
              - 记录学习和改进

        - workflow_end:
          action: project_complete
          notes: |
              所有 stories 已实现并审查！
              服务开发阶段完成。

              参考：{root}/data/sdat-kb.md#IDE Development Workflow

    flow_diagram: |
        ```mermaid
        graph TD
            A[Start: Service Development] --> B[analyst: project-brief.md]
            B --> C[pm: prd.md]
            C --> D[architect: architecture.md]
            D --> E{Architecture suggests PRD changes?}
            E -->|Yes| F[pm: update prd.md]
            E -->|No| G[po: validate all artifacts]
            F --> G
            G --> H{PO finds issues?}
            H -->|Yes| I[Return to relevant agent for fixes]
            H -->|No| J[po: shard documents]
            I --> G

            J --> K[sm: create story]
            K --> L{Review draft story?}
            L -->|Yes| M[analyst/pm: review & approve story]
            L -->|No| N[dev: implement story]
            M --> N
            N --> O{QA review?}
            O -->|Yes| P[qa: review implementation]
            O -->|No| Q{More stories?}
            P --> R{QA found issues?}
            R -->|Yes| S[dev: address QA feedback]
            R -->|No| Q
            S --> P
            Q -->|Yes| K
            Q -->|No| T{Epic retrospective?}
            T -->|Yes| U[po: epic retrospective]
            T -->|No| V[Project Complete]
            U --> V

            B -.-> B1[Optional: brainstorming]
            B -.-> B2[Optional: market research]
            D -.-> D1[Optional: technical research]

            style V fill:#90EE90
            style J fill:#ADD8E6
            style K fill:#ADD8E6
            style N fill:#ADD8E6
            style B fill:#FFE4B5
            style C fill:#FFE4B5
            style D fill:#FFE4B5
            style M fill:#F0E68C
            style P fill:#F0E68C
            style U fill:#F0E68C
        ```

    decision_guidance:
        when_to_use:
            - 构建生产 API 或 microservices
            - 多个端点和复杂业务逻辑
            - 需要全面的文档和测试
            - 多个团队成员将参与
            - 预期长期维护
            - 企业或面向外部的 API

    handoff_prompts:
        analyst_to_pm: "项目简介已完成。将其保存为项目中的 docs/project-brief.md，然后创建 PRD。"
        pm_to_architect: "PRD 已准备就绪。将其保存为项目中的 docs/prd.md，然后创建服务架构。"
        architect_review: "架构完成。将其保存为 docs/architecture.md。您是否建议对 PRD stories 进行任何更改或需要添加新的 stories？"
        architect_to_pm: "请使用建议的 story 更改更新 PRD，然后将完整的 prd.md 重新导出到 docs/。"
        updated_to_po: "docs/ 文件夹中的所有文档已准备就绪。请验证所有工件的一致性。"
        po_issues: "PO 发现 [document] 有问题。请返回 [agent] 进行修复并重新保存更新的文档。"
        complete: "所有规划工件已在 docs/ 文件夹中验证并保存。移动到 IDE 环境开始开发。"
